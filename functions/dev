# -*-shell-script-*-
#
# development workflow functs
#

_load_lots_of_stuff() {
  # if `brew ls chruby &>/dev/null`; then
  #   source /usr/local/share/chruby/chruby.sh
  #   source /usr/local/share/chruby/auto.sh
  # else
  #   if `brew ls rbenv &>/dev/null`; then
  #     eval "$(rbenv init -)";
  #   fi
  # fi
}

# list pids for unicorn master processes
umm() {
    ps ax | grep "unicorn.*master.*\-p.${1}" | cut -d ' ' -f 1
}

# ad-hoc ssh-key generation without developer involvement
gen-key() {
  ssh-keygen -b 4096 -t rsa -f $1-id_rsa -q -N "" -C "${1} $(dbtime)"
}

# useful pkcs8 encryption of an ssh key
enc-key() {
  openssl pkcs8 -topk8 -v2 des3 -in $HOME/.ssh/${1} -out ~/.ssh/${1}.new
}

psg() {
  ps aux | grep $1 | grep -v grep
}

# Prints modified files from within all nested Git dirs
gmod() {
  for dir in $(l); do cd $dir && git st && cd ..; done | grep "modified" | awk {'print $2'}
}

# Perform a command over each unique nested directory and file combo
# for-nested-dir() {
#   for dir in $($1); do echo $dir | awk -F / '{ print $(NF-4) }'; done | sort | uniq
# }

# Escape string in shell
escstr() { echo $(printf '%q' $1) }

# 'snake-case' => 'SnakeCase'
#
# Relies on gsed (GNU Sed)
snake_to_camel() {
  echo "$1" | gsed 's/-\([a-z]\)/\U\1/g' | gsed 's/\([a-z]\)/\u\1/'
}

# Increment the next AWS ECR image version label by referencing the highest
# integer label currently in the repo.
ecr-next() {
  aws ecr list-images --repository-name $1 |
    jq '.imageIds|map(.imageTag)|sort|.[]|strings|tonumber|.+1' 2>/dev/null |
    sort -r |
    head -1
}

lswhich() {
  ls -la $(which $1)
}

# Script that loads Triton environment
tval() {
  eval $(triton env $1) && eval $(triton env $1 --docker)
}

# just an iteration example
# for i in $(seq 1 $END); do echo $i; done
iter() {
  seq 1 $1
}
